<!doctype html>  
<html lang="en">
	
	<head>
		<meta charset="utf-8">
		
		<title>Remote Presentation</title>

		<meta name="description" content="An easy to use CSS 3D slideshow tool for quickly creating good looking HTML presentations.">
		<meta name="author" content="Hakim El Hattab">

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
		
		<link href='http://fonts.googleapis.com/css?family=Lato:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
		
		<link rel="stylesheet" href="/css/reset.css">
		<link rel="stylesheet" href="/css/main.css">
		<link rel="stylesheet" href="/css/print.css" type="text/css" media="print">

		<link rel="stylesheet" href="/lib/css/zenburn.css">
		<link rel="stylesheet" href="/css/style.css">
		<link rel="stylesheet" href="/css/pointer.css">
		<link rel="stylesheet" href="/css/animate.css">
		<script	src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
		<script>

		</script>

	</head>
	
	<body>
	
		<%- body %>
	
<!-- Optional libraries for code syntax highlighting and classList support in IE9 -->
<script src="/lib/js/head.min.js"></script>
<script>
	// Load the main reveal.js script
	head.js( '/js/reveal.js', function() {
		// Parse the query string into a key/value object
		var query = {};

		location.search.replace( /[A-Z0-9]+?=(\w*)/gi, function(a) {
			query[ a.split( '=' ).shift() ] = a.split( '=' ).pop();
		} );

		// Fires when a slide with data-state=customevent is activated
		Reveal.addEventListener( 'slidechanged', function(event) {
			if(event.currentSlide==6){
		        $('#fade').fadeIn(2200);
		    }
		} );

		// Fires each time a new slide is activated
		Reveal.addEventListener( 'slidechanged', function( event ) {
			console.log('event.currentSlide' + event.currentSlide);
		} );

		Reveal.initialize({
			// Display controls in the bottom right corner
			controls: true,

			// Display a presentation progress bar
			progress: true,

			// If true; each slide will be pushed to the browser history
			history: true,

			// Loops the presentation, defaults to false
			loop: false,

			// Flags if mouse wheel navigation should be enabled
			mouseWheel: false,

			// Apply a 3D roll to links on hover
			rollingLinks: true,

			// UI style
			theme: 'beige', 

			// Transition style
			transition: query.transition || 'linear' // default/cube/page/concave/linear(2d)
		});
	} );
	
	// Load third party scripts
	head.js( '/lib/js/classList.js' );
	head.js( '/lib/js/highlight.js', function() {
		// Fire off syntax highlighting for potential code samples in the slides
		hljs.initHighlightingOnLoad();
	} );


	// presentation id
	var presentation_id = 'demo' ; // default to demo presentation
			
	// map the url to the presentation id
	var pathNameArr = window.location.pathname.split("/");
	if(pathNameArr.length > 1)
		presentation_id = pathNameArr[1];

	head.js( '/socket.io/socket.io.js' , function() {
		
		// connect
		var socket = io.connect('http://momentoteca.herokuapp.com');	
		
		socket.on('connect', function () {
			console.log("client connected. Sending cur slide request");
			
	
			// on connect send presentation request
			socket.emit('request_presentation', {'id': presentation_id} );
		
			// init data
			socket.on('initdata', function(data) {
				console.log("Init data: " + JSON.stringify(data) );
				if(data.id == presentation_id)
				{
					// go to the respective slide
					Reveal.navigateTo(data.indexh, data.indexv);
				}
			});
			
			socket.on('updatedata', function(data) {
				console.log("Receive update data: " + JSON.stringify(data) );
				
				if(data.id == presentation_id)
				{
					// go to the respective slide
					Reveal.navigateTo(data.indexh, data.indexv);
				}
			});
			
			socket.on('acelerometerEvent', function(data){
				console.log('acelerometerEvent on slide');
				Reveal.handleOrientationEvent(data);
			});
		
		});
		
	} );

/*
    var initialX = null;
    var initialY = null;

    var ball = document.getElementById('ball');

    function handleOrientationEvent(event) {

        var x = event.beta ? event.beta : event.y * 90;
        var y = event.gamma ? event.gamma : event.x * 90;

        window.console && console.info('Raw position: x, y: ', x, y);

        if (!initialX && !initialY) {

            initialX = x;
            initialY = y;

        } else {

            var positionX = initialX - x;
            var positionY = initialY - y;

            ball.style.top = (90 + positionX * 5) + 'px';
            ball.style.left = (90 + positionY * 5) + 'px';
        }
    }

    function isEventFired() {
        if (!initialX && !initialY) {
            var warningElement = document.getElementById('warning');
            warningElement.innerText = 'Warning: Cannot receive device orientation events, this browser is not supported.';
            warningElement.style.display = 'inline-block';
        }
    }

    // Webkit en Mozilla variant beide registreren.
    window.addEventListener("MozOrientation", handleOrientationEvent, true);
    window.addEventListener("deviceorientation", handleOrientationEvent, true);

    setTimeout(isEventFired, 2000);
*/
	
</script>


	</body>
</html>

